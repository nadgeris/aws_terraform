skip = true

locals {
  common_vars = yamldecode(file("${find_in_parent_folders("definitions.yaml")}"))
  profile = local.common_vars.live.profile
  region =  local.common_vars.live.region
  state_region = local.common_vars.live.state_region
}


remote_state {
  disable_dependency_optimization = true

  backend = "s3"
  generate = {
    path      = "backend.tf"
    if_exists = "overwrite_terragrunt"
  }
  config = {
    profile = "${local.profile}"
    bucket = "terraformteststate"
    key =  "terraform/${path_relative_to_include()}/terraform.tf"
    region = "${local.state_region}"
    dynamodb_table = "terraform-state"

  }
}

generate "provider" {
  path = "provider.tf"
  if_exists = "overwrite_terragrunt"
  contents = <<EOF

  terraform {
    required_version = "~> 1.1.7"
    required_providers {
      aws = {
        source  = "hashicorp/aws"
        version = "~> 4.0"
      }
      local = {
        source = "hashicorp/local"
      }      
    }
  }
  provider "aws" {
    // generated by terragrunt
    region = "${local.region}"
    profile = "${local.profile}"
  }
  provider "aws" {
    // generated by terragrunt
    alias = "dns"
    region =  "${local.region}"
    profile =  "${local.profile}"
  }

EOF
}

terraform {

  extra_arguments "parallelism" {
    commands = get_terraform_commands_that_need_parallelism()
    arguments = ["-parallelism=15"]
  }
  # Force Terraform to keep trying to acquire a lock for up to 3 minutes if someone else already has the lock
  extra_arguments "retry_lock" {
    commands  = get_terraform_commands_that_need_locking()
    arguments = ["-lock-timeout=3m"]
  }


  before_hook "before_plan_apply_hook" {
    commands     = ["plan", "apply"]
    execute      = ["echo", "START Terragrunt execution"]    
  }

  after_hook "after_plan_apply_hook" {
    commands     = ["plan", "apply"]
    execute      = ["echo", "FINISH Terragrunt execution"]    
  }

  before_hook "before_destroy_hook" {
    commands     = ["destroy"]
    execute      = ["echo", "START Terragrunt destroy"]    
  }
  after_hook "after_destroy_hook" {
    commands     = ["destroy"]
    execute      = ["echo", "FINISH Terragrunt destroy"]    
  }

  error_hook "on_error_hook" {
    commands     = ["plan", "apply", "destroy"]
    execute      = ["echo", "ERROR running Terragrunt"]
    on_errors = [
      ".*",
    ]    
  }

}

retry_max_attempts = 3
retry_sleep_interval_sec = 5
